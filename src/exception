#pragma once

#include <boost/exception/errinfo_api_function.hpp>
#include <boost/exception/errinfo_at_line.hpp>
#include <boost/exception/errinfo_errno.hpp>
#include <boost/exception/errinfo_file_handle.hpp>
#include <boost/exception/errinfo_file_name.hpp>
#include <boost/exception/errinfo_file_open_mode.hpp>
#include <boost/exception/info.hpp>
#include <boost/throw_exception.hpp>

#include <exception>

namespace cypher
{

	struct _exception : virtual std::exception, virtual boost::exception { };

	struct runtime_error : virtual std::runtime_error, virtual boost::exception {
		runtime_error(std::stringstream&);
	};

	struct pexception : public _exception
	{
		pexception(std::string);
	};
}

#define THROW(x)		BOOST_THROW_EXCEPTION((x));

#define runtime_error(x)	runtime_error(static_cast<std::stringstream&>(std::stringstream() << x))

// vim: ft=cpp
